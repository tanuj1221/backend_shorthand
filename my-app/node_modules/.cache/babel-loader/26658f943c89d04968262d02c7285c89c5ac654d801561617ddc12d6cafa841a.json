{"ast":null,"code":"var _jsxFileName = \"D:\\\\Academics\\\\M. Tech\\\\Shorthand nodejs-react-sqlite\\\\dotnet\\\\ShorthandBasicApp\\\\Backend\\\\Backend\\\\Backend-Steno\\\\my-app\\\\src\\\\components\\\\EditStudentForm.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditStudentForm = () => {\n  _s();\n  const {\n    id: studentId\n  } = useParams();\n  const [studentDetails, setStudentDetails] = useState({\n    firstName: '',\n    lastName: '',\n    middleName: '',\n    motherName: '',\n    mobile_no: '',\n    email: ''\n    // Add other fields as necessary\n  });\n  const [selectedYear, setSelectedYear] = useState('');\n  const [selectedSemester, setSelectedSemester] = useState('');\n  const [selectedSubjects, setSelectedSubjects] = useState([]);\n  useEffect(() => {\n    if (studentId) {\n      // Only fetch if studentId is available\n      const fetchStudentData = async () => {\n        try {\n          const response = await axios.get(`http://localhost:3000/students/${studentId}`);\n          const studentData = response.data;\n          setStudentDetails({\n            firstName: studentData.firstName,\n            lastName: studentData.lastName,\n            motherName: studentData.motherName,\n            middleName: studentData.middleName,\n            mobile_no: studentData.mobile_no,\n            email: studentData.email,\n            image: studentData.image\n          });\n          setSelectedYear(studentData.batchYear);\n          setSelectedSemester(studentData.semester);\n          setSelectedSubjects(studentData.subjects.map(subject => subject.subjectId));\n          // Add other fields as necessary\n        } catch (error) {\n          console.error('Failed to fetch student data:', error);\n        }\n      };\n      fetchStudentData();\n    }\n  }, [studentId]); // Retrieve student ID from URL\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setStudentDetails(prevDetails => ({\n      ...prevDetails,\n      [name]: value\n    }));\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    axios.put(`http://localhost:3000/students/${studentId}`, {\n      ...studentDetails,\n      batchYear: selectedYear,\n      semester: selectedSemester,\n      subjects: selectedSubjects\n    }).then(response => {\n      alert('Student updated successfully!');\n    }).catch(error => {\n      console.error('Failed to update student:', error);\n    });\n  };\n\n  // Additional form elements for year, semester, and subjects can be added similarly.\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"First Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"firstName\",\n        value: studentDetails.firstName,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Update Student\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(EditStudentForm, \"1UYZRqg2QjWvgxzYL9yQjbBdRck=\", false, function () {\n  return [useParams];\n});\n_c = EditStudentForm;\nexport default EditStudentForm;\nvar _c;\n$RefreshReg$(_c, \"EditStudentForm\");","map":{"version":3,"names":["React","useEffect","useState","axios","useParams","jsxDEV","_jsxDEV","EditStudentForm","_s","id","studentId","studentDetails","setStudentDetails","firstName","lastName","middleName","motherName","mobile_no","email","selectedYear","setSelectedYear","selectedSemester","setSelectedSemester","selectedSubjects","setSelectedSubjects","fetchStudentData","response","get","studentData","data","image","batchYear","semester","subjects","map","subject","subjectId","error","console","handleChange","event","name","value","target","prevDetails","handleSubmit","preventDefault","put","then","alert","catch","onSubmit","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Academics/M. Tech/Shorthand nodejs-react-sqlite/dotnet/ShorthandBasicApp/Backend/Backend/Backend-Steno/my-app/src/components/EditStudentForm.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst EditStudentForm = () => {\r\n  const { id: studentId } = useParams();\r\n  const [studentDetails, setStudentDetails] = useState({\r\n    firstName: '',\r\n    lastName: '',\r\n    middleName: '',\r\n    motherName: '',\r\n    mobile_no: '',\r\n    email: '',\r\n    // Add other fields as necessary\r\n  });\r\n  const [selectedYear, setSelectedYear] = useState('');\r\n  const [selectedSemester, setSelectedSemester] = useState('');\r\n  const [selectedSubjects, setSelectedSubjects] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (studentId) { // Only fetch if studentId is available\r\n      const fetchStudentData = async () => {\r\n        try {\r\n          const response = await axios.get(`http://localhost:3000/students/${studentId}`);\r\n          const studentData = response.data;\r\n          setStudentDetails({\r\n            firstName: studentData.firstName,\r\n            lastName: studentData.lastName,\r\n            motherName: studentData.motherName,\r\n            middleName: studentData.middleName,\r\n            mobile_no: studentData.mobile_no,\r\n            email: studentData.email,\r\n            image: studentData.image,\r\n          });\r\n          setSelectedYear(studentData.batchYear);\r\n          setSelectedSemester(studentData.semester);\r\n          setSelectedSubjects(studentData.subjects.map(subject => subject.subjectId));\r\n          // Add other fields as necessary\r\n        } catch (error) {\r\n          console.error('Failed to fetch student data:', error);\r\n        }\r\n      };\r\n\r\n      fetchStudentData();\r\n    }\r\n  }, [studentId]); // Retrieve student ID from URL\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setStudentDetails(prevDetails => ({\r\n      ...prevDetails,\r\n      [name]: value\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    axios.put(`http://localhost:3000/students/${studentId}`, {\r\n      ...studentDetails,\r\n      batchYear: selectedYear,\r\n      semester: selectedSemester,\r\n      subjects: selectedSubjects\r\n    })\r\n    .then(response => {\r\n      alert('Student updated successfully!');\r\n    })\r\n    .catch(error => {\r\n      console.error('Failed to update student:', error);\r\n    });\r\n  };\r\n\r\n  // Additional form elements for year, semester, and subjects can be added similarly.\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label>\r\n        First Name:\r\n        <input\r\n          type=\"text\"\r\n          name=\"firstName\"\r\n          value={studentDetails.firstName}\r\n          onChange={handleChange}\r\n        />\r\n      </label>\r\n      {/* Additional fields here */}\r\n      <button type=\"submit\">Update Student</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default EditStudentForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}